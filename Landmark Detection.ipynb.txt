{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":2199888,"sourceType":"datasetVersion","datasetId":1321006},{"sourceId":6511834,"sourceType":"datasetVersion","datasetId":3765197}],"dockerImageVersionId":30559,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"#  Required Libraries","metadata":{}},{"cell_type":"code","source":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt \nimport seaborn as sns \nfrom sklearn.preprocessing import * \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import * \nimport cv2 \nimport random \nfrom PIL import Image \nimport tensorflow \nimport os \nimport keras \nimport warnings\nfrom keras.models import Sequential,Model\nfrom keras.utils import *\nfrom keras.layers.convolutional import Conv2D,MaxPooling2D\nfrom keras.layers import * \nfrom tensorflow.keras.optimizers import Adam \nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.metrics import * \nSEED=1\ntensorflow.random.set_seed(SEED) \nwarnings.filterwarnings(\"ignore\")","metadata":{"execution":{"iopub.status.busy":"2023-09-24T15:08:45.174300Z","iopub.execute_input":"2023-09-24T15:08:45.174666Z","iopub.status.idle":"2023-09-24T15:08:45.184736Z","shell.execute_reply.started":"2023-09-24T15:08:45.174641Z","shell.execute_reply":"2023-09-24T15:08:45.183586Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df=pd.read_csv(\"/kaggle/input/google-landmark-dataset-v2-mini/gldv2_mini/gldv2_mini.csv\") \ndf","metadata":{"execution":{"iopub.status.busy":"2023-09-24T15:03:19.508488Z","iopub.execute_input":"2023-09-24T15:03:19.509328Z","iopub.status.idle":"2023-09-24T15:03:20.065949Z","shell.execute_reply.started":"2023-09-24T15:03:19.509294Z","shell.execute_reply":"2023-09-24T15:03:20.064180Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"basepath=\"/kaggle/input/google-landmark-dataset-v2-mini/gldv2_mini\" \ndf=df.loc[:25000,:] \ndf[\"filename\"]=df[\"filename\"].apply(lambda x:basepath+\"/\"+x[0]+\"/\"+x[1]+\"/\"+x[2]+\"/\"+x+\".jpg\") \ndf.head()","metadata":{"execution":{"iopub.status.busy":"2023-09-24T15:03:26.997012Z","iopub.execute_input":"2023-09-24T15:03:26.997347Z","iopub.status.idle":"2023-09-24T15:03:27.024163Z","shell.execute_reply.started":"2023-09-24T15:03:26.997321Z","shell.execute_reply":"2023-09-24T15:03:27.022449Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### 1. Extracting 25000 sampes from total samples \n##### 2. merging the path to every image ","metadata":{}},{"cell_type":"code","source":"df.columns=[\"image\",\"landmark_id\"]  # Changing column name \"filename\" to \"image\"","metadata":{"execution":{"iopub.status.busy":"2023-09-24T15:03:37.748604Z","iopub.execute_input":"2023-09-24T15:03:37.749944Z","iopub.status.idle":"2023-09-24T15:03:37.755847Z","shell.execute_reply.started":"2023-09-24T15:03:37.749890Z","shell.execute_reply":"2023-09-24T15:03:37.754546Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.shape  #Shape of dataset","metadata":{"execution":{"iopub.status.busy":"2023-09-24T15:03:42.780406Z","iopub.execute_input":"2023-09-24T15:03:42.780755Z","iopub.status.idle":"2023-09-24T15:03:42.788689Z","shell.execute_reply.started":"2023-09-24T15:03:42.780732Z","shell.execute_reply":"2023-09-24T15:03:42.787179Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.landmark_id.nunique()  #number of unique values in landmark_id","metadata":{"execution":{"iopub.status.busy":"2023-09-24T15:03:49.077491Z","iopub.execute_input":"2023-09-24T15:03:49.077998Z","iopub.status.idle":"2023-09-24T15:03:49.093607Z","shell.execute_reply.started":"2023-09-24T15:03:49.077959Z","shell.execute_reply":"2023-09-24T15:03:49.092279Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.landmark_id.value_counts()  #count of each landmark id ","metadata":{"execution":{"iopub.status.busy":"2023-09-24T15:03:52.703674Z","iopub.execute_input":"2023-09-24T15:03:52.704047Z","iopub.status.idle":"2023-09-24T15:03:52.718335Z","shell.execute_reply.started":"2023-09-24T15:03:52.704021Z","shell.execute_reply":"2023-09-24T15:03:52.717195Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Histogram","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(10,3)) \nplt.hist(df[\"landmark_id\"].value_counts().values) \nplt.title(\"Count vs Number of Classes\") \nplt.xlabel(\"Count\") \nplt.ylabel(\"Number of Classes\") \nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-09-24T15:04:53.851494Z","iopub.execute_input":"2023-09-24T15:04:53.852083Z","iopub.status.idle":"2023-09-24T15:04:54.073499Z","shell.execute_reply.started":"2023-09-24T15:04:53.852045Z","shell.execute_reply":"2023-09-24T15:04:54.071964Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Above plot representing Distribution of counts of landmark ids \n\n","metadata":{}},{"cell_type":"code","source":"l=LabelEncoder() \nl.fit(df[\"landmark_id\"])       # Fitting landmark_id data to Label Encoder","metadata":{"execution":{"iopub.status.busy":"2023-09-24T15:05:01.716219Z","iopub.execute_input":"2023-09-24T15:05:01.716658Z","iopub.status.idle":"2023-09-24T15:05:01.732942Z","shell.execute_reply.started":"2023-09-24T15:05:01.716609Z","shell.execute_reply":"2023-09-24T15:05:01.731914Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Encoding and Decoding functions","metadata":{}},{"cell_type":"code","source":"def encoding(id): \n    return l.transform(id) \ndef decoding(id): \n    return l.inverse_transform([id])[0]","metadata":{"execution":{"iopub.status.busy":"2023-09-24T15:05:06.587547Z","iopub.execute_input":"2023-09-24T15:05:06.587998Z","iopub.status.idle":"2023-09-24T15:05:06.593872Z","shell.execute_reply.started":"2023-09-24T15:05:06.587960Z","shell.execute_reply":"2023-09-24T15:05:06.592297Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df[\"landmark_id\"]=encoding(df[\"landmark_id\"])  #Transforming landmarkid \ndf","metadata":{"execution":{"iopub.status.busy":"2023-09-24T15:05:15.816129Z","iopub.execute_input":"2023-09-24T15:05:15.816479Z","iopub.status.idle":"2023-09-24T15:05:15.830637Z","shell.execute_reply.started":"2023-09-24T15:05:15.816456Z","shell.execute_reply":"2023-09-24T15:05:15.829371Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Visual representation of Random landmarks","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(12,12)) \nfor i in range(1,6):  \n    r=random.choice(range(25001))\n    im=df.iloc[r,0] \n    id=decoding(df.iloc[r,1]) \n    plt.subplot(1,5,i) \n    ar=cv2.imread(im)  \n    ar=cv2.resize(ar,(224,224))\n    plt.imshow(ar) \n    plt.title(id) \n    plt.axis(\"off\")\nplt.show()\n    ","metadata":{"execution":{"iopub.status.busy":"2023-09-22T11:04:38.708905Z","iopub.execute_input":"2023-09-22T11:04:38.709363Z","iopub.status.idle":"2023-09-22T11:04:39.482385Z","shell.execute_reply.started":"2023-09-22T11:04:38.709329Z","shell.execute_reply":"2023-09-22T11:04:39.481250Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Splitting of Independent and Dependent Variables","metadata":{}},{"cell_type":"code","source":"x=df[\"image\"] \ny=df[\"landmark_id\"]","metadata":{"execution":{"iopub.status.busy":"2023-09-24T15:05:27.666885Z","iopub.execute_input":"2023-09-24T15:05:27.667226Z","iopub.status.idle":"2023-09-24T15:05:27.673087Z","shell.execute_reply.started":"2023-09-24T15:05:27.667203Z","shell.execute_reply":"2023-09-24T15:05:27.671490Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x #path of landmark id","metadata":{"execution":{"iopub.status.busy":"2023-09-22T11:07:41.277038Z","iopub.execute_input":"2023-09-22T11:07:41.277533Z","iopub.status.idle":"2023-09-22T11:07:41.288901Z","shell.execute_reply.started":"2023-09-22T11:07:41.277498Z","shell.execute_reply":"2023-09-22T11:07:41.287317Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y # Encode landmark id's","metadata":{"execution":{"iopub.status.busy":"2023-09-22T11:08:22.218380Z","iopub.execute_input":"2023-09-22T11:08:22.218869Z","iopub.status.idle":"2023-09-22T11:08:22.228785Z","shell.execute_reply.started":"2023-09-22T11:08:22.218833Z","shell.execute_reply":"2023-09-22T11:08:22.227597Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Splitting into Train,Test,Validation data","metadata":{}},{"cell_type":"code","source":"xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.1,stratify=y,random_state=5) \nxtrain,xval,ytrain,yval=train_test_split(xtrain,ytrain,test_size=0.1,stratify=ytrain,random_state=5)","metadata":{"execution":{"iopub.status.busy":"2023-09-24T15:05:34.452887Z","iopub.execute_input":"2023-09-24T15:05:34.453348Z","iopub.status.idle":"2023-09-24T15:05:34.497082Z","shell.execute_reply.started":"2023-09-24T15:05:34.453309Z","shell.execute_reply":"2023-09-24T15:05:34.496184Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(xtrain.shape,ytrain.shape) \nprint(xval.shape,yval.shape) \nprint(xtest.shape,ytest.shape)","metadata":{"execution":{"iopub.status.busy":"2023-09-24T15:05:40.268276Z","iopub.execute_input":"2023-09-24T15:05:40.268604Z","iopub.status.idle":"2023-09-24T15:05:40.275508Z","shell.execute_reply.started":"2023-09-24T15:05:40.268582Z","shell.execute_reply":"2023-09-24T15:05:40.274226Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Concatenation of Independent and dependent as a DataFrame","metadata":{}},{"cell_type":"code","source":"traindf=pd.concat([xtrain,ytrain],axis=1) \nvaldf=pd.concat([xval,yval],axis=1) \ntestdf=pd.concat([xtest,ytest],axis=1)  \n# we are converting type of id into string because flow_from_dataframe accepts target columns with values of string type\ntraindf[\"landmark_id\"]=traindf[\"landmark_id\"].astype(str) \nvaldf[\"landmark_id\"]=valdf[\"landmark_id\"].astype(str) \ntestdf[\"landmark_id\"]=testdf[\"landmark_id\"].astype(str) \ntraindf.head()","metadata":{"execution":{"iopub.status.busy":"2023-09-24T15:05:46.167240Z","iopub.execute_input":"2023-09-24T15:05:46.167612Z","iopub.status.idle":"2023-09-24T15:05:46.194567Z","shell.execute_reply.started":"2023-09-24T15:05:46.167581Z","shell.execute_reply":"2023-09-24T15:05:46.192860Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## ImageDataGenerator","metadata":{}},{"cell_type":"code","source":"train_generator =ImageDataGenerator(\n   rescale=1/255,\n    rotation_range = 10,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    zoom_range=0.5,)  #ImageDataGenerator for producing various transformations of image\n\ntest_generator =ImageDataGenerator(\n   rescale=1/255) ","metadata":{"execution":{"iopub.status.busy":"2023-09-24T15:09:24.649691Z","iopub.execute_input":"2023-09-24T15:09:24.650110Z","iopub.status.idle":"2023-09-24T15:09:24.656805Z","shell.execute_reply.started":"2023-09-24T15:09:24.650078Z","shell.execute_reply":"2023-09-24T15:09:24.654996Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Flow from Dataframe","metadata":{}},{"cell_type":"code","source":"train_images =train_generator.flow_from_dataframe( \n    dataframe=traindf,x_col='image',y_col='landmark_id',color_mode='rgb',class_mode='categorical',target_size=(224,224),batch_size=256,\n    shuffle=True,) \n#Flow from Dataframe for feeding data interms of batches to model\nval_images =test_generator.flow_from_dataframe( \n    dataframe=valdf,x_col='image',y_col='landmark_id',color_mode='rgb',class_mode='categorical',target_size=(224,224),batch_size=256, \n    shuffle=False,seed=SEED) \ntest_images =test_generator.flow_from_dataframe( \n    dataframe=testdf,x_col='image',y_col='landmark_id',color_mode='rgb',class_mode='categorical',target_size=(224,224),batch_size=256,\n    shuffle=False,seed=SEED,)","metadata":{"execution":{"iopub.status.busy":"2023-09-24T15:09:33.199897Z","iopub.execute_input":"2023-09-24T15:09:33.200315Z","iopub.status.idle":"2023-09-24T15:11:30.449863Z","shell.execute_reply.started":"2023-09-24T15:09:33.200278Z","shell.execute_reply":"2023-09-24T15:11:30.448157Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for i in train_images.class_indices: \n    print(i,\":\",train_images.class_indices[i],end=\" , \") ","metadata":{"execution":{"iopub.status.busy":"2023-09-22T11:31:37.139584Z","iopub.execute_input":"2023-09-22T11:31:37.140880Z","iopub.status.idle":"2023-09-22T11:31:37.156630Z","shell.execute_reply.started":"2023-09-22T11:31:37.140810Z","shell.execute_reply":"2023-09-22T11:31:37.154942Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### key represent encoded landmarkid and it is of string type \n##### value represents index of landmark id \n##### we can observe that though landmarkid is of string type ,flow from dataframe not assigning position according to its value \n##### flow from dataframe assigning 0 index to 0 id,after that it is assigning index to all landmakid starting with 1 in ascending order and then landmakid starting with 2 in ascending order and goes on ","metadata":{}},{"cell_type":"markdown","source":"## Transforming key into value and value into key of trainimages.classe_indices","metadata":{}},{"cell_type":"code","source":"d={}  \nfor i in train_images.class_indices: \n    d[train_images.class_indices[i]]=i","metadata":{"execution":{"iopub.status.busy":"2023-09-22T12:11:50.616665Z","iopub.execute_input":"2023-09-22T12:11:50.617208Z","iopub.status.idle":"2023-09-22T12:11:50.624321Z","shell.execute_reply.started":"2023-09-22T12:11:50.617170Z","shell.execute_reply":"2023-09-22T12:11:50.622928Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Interchanging key and value of trainimages.classe_indices which contain landmarkid and index position to extract landmark id easily by index position ","metadata":{}},{"cell_type":"markdown","source":"## Cnn model","metadata":{}},{"cell_type":"code","source":"def mymodel():\n    nooffilters=64\n    sizeoffilters1=(3,3)\n    sizeofpool=(2,2)\n    model=Sequential() \n    model.add((Conv2D(32,sizeoffilters1,kernel_initializer=\"he_uniform\",input_shape=(224,224,3),activation='elu'))) \n    model.add((Conv2D(32,sizeoffilters1,kernel_initializer=\"he_uniform\",activation='elu'))) \n    model.add(MaxPooling2D(pool_size=sizeofpool)) \n    model.add((Conv2D(64,sizeoffilters1,kernel_initializer=\"he_uniform\",activation='elu'))) \n    model.add((Conv2D(64,sizeoffilters1,kernel_initializer=\"he_uniform\",activation='elu'))) \n    model.add(MaxPooling2D(pool_size=sizeofpool)) \n    model.add((Conv2D(128,sizeoffilters1,kernel_initializer=\"he_uniform\",activation='elu'))) \n    model.add((Conv2D(128,sizeoffilters1,kernel_initializer=\"he_uniform\",activation='elu')))\n    model.add(MaxPooling2D(pool_size=sizeofpool)) \n    model.add((Conv2D(256,sizeoffilters1,kernel_initializer=\"he_uniform\",activation='elu'))) \n    model.add((Conv2D(256,sizeoffilters1,kernel_initializer=\"he_uniform\",activation='elu')))\n    model.add(MaxPooling2D(pool_size=sizeofpool)) \n    model.add(GlobalAveragePooling2D())\n    model.add(Dense(700,kernel_initializer=\"he_uniform\",activation='elu')) \n    model.add(Dropout(0.2))\n    model.add(Dense(257,kernel_initializer=\"glorot_uniform\",activation='softmax'))\n    model.compile(Adam(learning_rate=0.001),loss='categorical_crossentropy',metrics=['accuracy'])\n    return model \nmodel = mymodel()","metadata":{"execution":{"iopub.status.busy":"2023-09-22T11:48:56.857965Z","iopub.execute_input":"2023-09-22T11:48:56.858453Z","iopub.status.idle":"2023-09-22T11:48:57.277719Z","shell.execute_reply.started":"2023-09-22T11:48:56.858417Z","shell.execute_reply":"2023-09-22T11:48:57.276580Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"callback = tensorflow.keras.callbacks.EarlyStopping(monitor='loss', patience=5, restore_best_weights=True)\nhistory = model.fit(\n    train_images,\n    epochs=60,  \n    validation_data=val_images, \n    callbacks=callback)","metadata":{"execution":{"iopub.status.busy":"2023-09-21T06:42:08.077236Z","iopub.execute_input":"2023-09-21T06:42:08.077625Z","iopub.status.idle":"2023-09-21T13:02:30.802764Z","shell.execute_reply.started":"2023-09-21T06:42:08.077587Z","shell.execute_reply":"2023-09-21T13:02:30.801766Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Training model for 60 epochs \n##### Early stopping for stop training process if there is no improvement","metadata":{}},{"cell_type":"code","source":"model=tensorflow.keras.models.load_model(\"/kaggle/input/hagxsc/model.h5\")","metadata":{"execution":{"iopub.status.busy":"2023-09-24T15:11:43.004369Z","iopub.execute_input":"2023-09-24T15:11:43.004774Z","iopub.status.idle":"2023-09-24T15:11:43.835281Z","shell.execute_reply.started":"2023-09-24T15:11:43.004744Z","shell.execute_reply":"2023-09-24T15:11:43.833902Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.plot(history.history['accuracy'],) \nplt.plot(history.history['val_accuracy']) \nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-09-21T13:14:12.450780Z","iopub.execute_input":"2023-09-21T13:14:12.451235Z","iopub.status.idle":"2023-09-21T13:14:12.706928Z","shell.execute_reply.started":"2023-09-21T13:14:12.451200Z","shell.execute_reply":"2023-09-21T13:14:12.705981Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.plot(history.history['loss'],) \nplt.plot(history.history['val_loss']) \nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-09-21T13:14:56.786633Z","iopub.execute_input":"2023-09-21T13:14:56.787058Z","iopub.status.idle":"2023-09-21T13:14:57.072340Z","shell.execute_reply.started":"2023-09-21T13:14:56.787026Z","shell.execute_reply":"2023-09-21T13:14:57.071318Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Accuracy score of testimages","metadata":{}},{"cell_type":"code","source":"ytrue = test_images.classes \nypred = model.predict(test_images) \nypred=np.argmax(ypred,axis=1) \naccuracy_score(ytrue,ypred)","metadata":{"execution":{"iopub.status.busy":"2023-09-22T12:14:46.699118Z","iopub.execute_input":"2023-09-22T12:14:46.699652Z","iopub.status.idle":"2023-09-22T12:17:16.529435Z","shell.execute_reply.started":"2023-09-22T12:14:46.699617Z","shell.execute_reply":"2023-09-22T12:17:16.527658Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"goodpred=[] \nc=0\nfor i,j in zip(ytrue,ypred):  \n    list1=[]\n    if j==i: \n        im=cv2.imread(testdf.image.iloc[c]) #\n        im=cv2.resize(im,(224,224))\n        im=im/255\n        list1.append(im)  \n        list1.append(c) \n        list1.append(j) \n        goodpred.append(list1)\n    c+=1\ngoodpred=np.asarray(goodpred) ","metadata":{"execution":{"iopub.status.busy":"2023-09-22T12:28:12.356527Z","iopub.execute_input":"2023-09-22T12:28:12.357053Z","iopub.status.idle":"2023-09-22T12:28:32.415727Z","shell.execute_reply.started":"2023-09-22T12:28:12.357015Z","shell.execute_reply":"2023-09-22T12:28:32.414169Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.summary()","metadata":{"execution":{"iopub.status.busy":"2023-09-24T15:12:23.180007Z","iopub.execute_input":"2023-09-24T15:12:23.180366Z","iopub.status.idle":"2023-09-24T15:12:23.230130Z","shell.execute_reply.started":"2023-09-24T15:12:23.180342Z","shell.execute_reply":"2023-09-24T15:12:23.225346Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Finding good predictions \n##### good predictions contains three values im,c,j \n##### im=image in matrix form,c=index of actual landmarkid,j=predicted index ","metadata":{}},{"cell_type":"code","source":"im=goodpred[:,0]   #Extracting matrix form of images from good predictions\nreal=goodpred[:,1]  #Extracting index of actual landmarkid from good predictions\npredicted=goodpred[:,2] #Extracting predicted index from good predictions\nplt.figure(figsize=(17,7))\nfor i in range(1,11): \n    trueid=decoding(int(testdf.landmark_id.iloc[real[i]])) \n    predictedid=decoding(int(d[predicted[i]])) \n    samplecount=list(df.landmark_id).count(int(testdf.landmark_id.iloc[real[i]]))\n    plt.subplot(2,5,i)\n    plt.imshow(im[i]) \n    plt.title(\"Label: \" + str(trueid) + \"\\npredicted as: \" +str(predictedid)+\"\\nSamples in class \" + str(trueid) + \": \" + str(samplecount))\n    plt.axis('off')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2023-09-22T12:40:11.878178Z","iopub.execute_input":"2023-09-22T12:40:11.878667Z","iopub.status.idle":"2023-09-22T12:40:13.352249Z","shell.execute_reply.started":"2023-09-22T12:40:11.878633Z","shell.execute_reply":"2023-09-22T12:40:13.350938Z"},"trusted":true},"execution_count":null,"outputs":[]}]}